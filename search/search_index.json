{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Structures Python","text":"<p>Welcome to the official documentation of Data Structures Python, an educational package developed by CHRIST SAGOMBAYE. This site guides you step-by-step to install, understand, and use the main data structures implemented from scratch in Python.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>\ud83d\udd27 Installation   How to install the package from PyPI or in development mode.</p> </li> <li> <p>\ud83d\ude80 Usage Guide   Some quick examples to get started.</p> </li> <li> <p>\ud83d\udce6 Modules   Detailed documentation for each data structure:</p> </li> <li>Array</li> <li>Stack</li> <li>Queue</li> <li>Linked List</li> <li>Binary Tree</li> <li> <p>Graph</p> </li> <li> <p>\u2696\ufe0f License   Terms of use and contribution.</p> </li> </ul> <p>Tip: Use the left menu to navigate directly to the section of interest.</p> <p>Happy reading and learning!</p>"},{"location":"installation/","title":"Installation","text":"<p>Two methods:</p> <ol> <li> <p>From PyPI '''bash pip install data-structures-py</p> </li> <li> <p>for development</p> </li> </ol> <p>git clone https://github.com/CodeWithSagomb/data-structures-python cd data-structures-python python -m pip install -e . '''</p>"},{"location":"license/","title":"License","text":"<p>This project is distributed under the MIT License.</p> <p>You are free to:</p> <ul> <li>Use, copy, and modify the code.</li> <li>Distribute your derivative versions.</li> </ul> <p>Provided that:</p> <ol> <li>You retain the copyright and license in all your copies.</li> <li>You mention the original author (christ sagombaye).</li> </ol> <p>For the full text, see the LICENSE file.</p>"},{"location":"usage/","title":"User Guide","text":"<p>After installing Data Structures Python, import and use your data structures like any other Python module.</p>"},{"location":"usage/#quick-examples","title":"Quick Examples","text":""},{"location":"usage/#stack","title":"Stack","text":"<p>```python</p> <p>from data_structures.stack import Stack</p> <p>s = Stack()</p> <p>s.push(1)</p> <p>s.push(2)</p> <p>print(s.pop())      # Display 2</p> <p>print(s.peek())     # Display 1</p> <p>print(s.is_empty()) # False</p> <p>For more complete demonstrations, see the notebooks in the examples/ folder.</p>"},{"location":"modules/array/","title":"Module <code>Array</code>","text":""},{"location":"modules/array/#classe-array","title":"Classe <code>Array</code>","text":"<pre><code>class Array:\n    def __init__(self, capacity: int): ...\n    def insert(self, index: int, value): ...\n    def remove(self, index: int): ...\n    def get(self, index: int): ...\n    def set(self, index: int, value): ...\n    def display(self): ...\n</code></pre>"},{"location":"modules/graph/","title":"Module <code>Graph</code>","text":""},{"location":"modules/graph/#classe-graph","title":"Classe <code>Graph</code>","text":"<pre><code>class Graph:\n    def __init__(self): ...\n    def add_vertex(self, vertex): ...\n    def add_edge(self, v1, v2): ...\n    def get_neighbors(self, vertex) -&gt; List[Any]: ...\n    def display(self) -&gt; None: ...\n</code></pre>"},{"location":"modules/linked_list/","title":"Module <code>LinkedList</code>","text":""},{"location":"modules/linked_list/#classes-node-et-linkedlist","title":"Classes <code>Node</code> et <code>LinkedList</code>","text":"<pre><code>class Node:\n    def __init__(self, data: Any):\n        self.data = data\n        self.next: Optional[Node] = None\n\nclass LinkedList:\n    def __init__(self): ...\n    def is_empty(self) -&gt; bool: ...\n    def append(self, data: Any) -&gt; None: ...\n    def prepend(self, data: Any) -&gt; None: ...\n    def delete(self, data: Any) -&gt; None: ...\n    def find(self, data: Any) -&gt; bool: ...\n    def __str__(self) -&gt; str: ...\n</code></pre>"},{"location":"modules/queue/","title":"Module <code>Queue</code>","text":""},{"location":"modules/queue/#classe-queue","title":"Classe <code>Queue</code>","text":"<pre><code>class Queue:\n    def __init__(self) -&gt; None: ...\n    def enqueue(self, item: Any) -&gt; None: ...\n    def dequeue(self) -&gt; Any: ...\n    def peek(self) -&gt; Any: ...\n    def is_empty(self) -&gt; bool: ...\n    def __str__(self) -&gt; str: ...\n</code></pre>"},{"location":"modules/stack/","title":"Module <code>Stack</code>","text":""},{"location":"modules/stack/#class-stack","title":"Class <code>Stack</code>","text":"<pre><code>class Stack:\n    def __init__(self) -&gt; None: ...\n    def push(self, item: Any) -&gt; None: ...\n    def pop(self) -&gt; Any: ...\n    def peek(self) -&gt; Any: ...\n    def is_empty(self) -&gt; bool: ...\n    def __str__(self) -&gt; str: ...\n</code></pre>"},{"location":"modules/tree/","title":"Module <code>BinaryTree</code>","text":""},{"location":"modules/tree/#classes-node-et-binarytree","title":"Classes <code>Node</code> et <code>BinaryTree</code>","text":"<pre><code>class Node:\n    def __init__(self, value): ...\n    self.left = None\n    self.right = None\n\nclass BinaryTree:\n    def __init__(self): ...\n    def insert(self, value): ...\n    def inorder_traversal(self, node) -&gt; List[Any]: ...\n    def display(self) -&gt; List[Any]: ...\n</code></pre>"}]}